## The objective of this code is to read in all the relevant data from the decawave experiments
## Perform some
##


import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import os

file_locLOS_listner = r'C:\Users\GregK\Desktop\Thesis_Data_analytics\Data_Analytics\Results\Test1LOS\Decawave_Test01_IDEAS_REDO_listner'
file_locLOS = r'C:\Users\Gregk\Downloads\Test1LOS\Test1LOS\Decawave_Test01_IDEAS_REDO_listner'
#file_locNLOS = r'C:\Users\GregK\Desktop\Thesis_Data_analytics\Data_Analytics\Results\Test2NLOS\QLAB'
#file_locKFNLOS = r'C:\Users\GregK\Desktop\Thesis_Data_analytics\Data_Analytics\Results\Test3NLOS\Test03_QLAB'

def read_file(ffp):
    """
    This function takes in a ffp of each file in the directory and outputs the experimental coordinates
    :param ffp: (a string) the full file path of each file in a directory
    :return data: data list of tuples each of which contain the experimental x and y_coordinate
    """
    i = 0
    x_parsed = []
    y_parsed = []
    x_coord_string = ""
    y_coord_string = ""
    with open(ffp, 'r') as file:
        for line in file:
            if ( (i % 3) == 0 and len(line) > 20 ):
                parse = line.split(' ')
                for item in parse:
                    if (item.startswith(',x')):
                        x_coord = item.split(':')[1].lstrip(',').rstrip(',')
                        for char in x_coord:
                            if ( (char).isalnum() or char =='.'):
                                x_coord_string +=char
                        x_coord_float = float(x_coord_string)
                        x_parsed.append(x_coord_float)
                        x_coord_string = ""
                    elif item.startswith(',y'):
                        y_coord = item.split(':')[1].lstrip(',').rstrip(',')
                        for char in y_coord:
                            if ( (char).isalnum() or char =='.'):
                                y_coord_string +=char
                        y_coord_float = float(y_coord_string)
                        y_parsed.append(y_coord_float)
                        y_coord_string = ""
            i+=1
    data = list(zip(x_parsed,y_parsed))
    return(data)

def getdataLOS():
    """
    this function reads in the .xlsx file where all the data is stored
    and returns the theoretical and experimental results
    :return:
        theor_result: A list of theoretical results Y_coordinates of Decawave Tag
        exp_result: a list of the experimental Y_coordinates of Decawave tag
    """
    df = pd.read_excel(r'Test01_LOS_IDEAS_TEK_4_22.xlsx', header = 0)
    anc_loc = df.loc[:,'Anchor Location(M)'].tolist()
    theor_result = df.loc[:,'Physical Tag Measurements(M)'].tolist()
    exp_result = df.loc[:,'Decawave Tag Measurements(M)'].tolist()
    return(theor_result,exp_result)

def parsedataLOS():
    """
    reads the file directory where the LOS data is stored and goes through every
    text file calling read_file to get the experimental data, while determining the
    theoretical measurements via text file names
    :return: LOS_Data: data containing both the theoretical and experimental data
            stored as an P*M(Number of tag positions by measurements) dimensions list of two tuples of two elements
             with the theoretical tuple being the first in each list
    """
    theor_coord = []
    exp_coord = []
    LOS_data = []
    for file in os.listdir(r'C:\Users\Gregk\Downloads\Test1LOS\Test1LOS\Decawave_Test01_IDEAS_REDO_listner'):
        if file.endswith('.txt'):
            file_path = f"{file_locLOS }\{file}"
            data_exp = read_file(file_path)
            exp_coord.append(data_exp)
            new_file = file.replace('dot', '.')
            new_file  = new_file.rstrip('Y.txt')
            coords = new_file.split('X')
            theor_coord.append((coords[0], coords[1]))
    for x in range(len(theor_coord)):
        exp_coord[x].insert(0,theor_coord[x])
        LOS_data.append(exp_coord[x])
    return LOS_data


def return_LOSarray():
    """
    :return:
    """
    pass

def meanerrorLOS(theor_result,exp_result,LOS_data):
    """
    Ths Function takes in as input the theoretical and measured Decawave values and
    outputs a chart of the meausured vs
    :param tag_loc_LOS: a list of the theoretical y_values of the tag
    :param dec_loc_LOS: a list of the measured/experimental y_values of the tag
    :return:
    """
    data_real =  [] ## a list of tuples of real tag measuremnets in 2D
    data_theor = [] ## a list of tuples of theoretical tag measuremnets in 2D
    x_coord_real_list = [] ## an unpacked list of each X_real_measurement
    y_coord_real_list = [] ## an unpacked list of each Y_real_measurement
    x_coord_theor_list = [] ## an unpacked list of each X_real_measurement
    y_coord_theor_list = [] ## an unpacked list of each Y_real_measurement
    x_ideal = [0,1.5]##Real distance ideal
    y_ideal = [0,2.25]## measured distance ideal
    tc = 0
    th = 0
    for tag_pos in LOS_data:
        i = 1#measures every line in new document starts at first experimental measurement after new tag_pos,doc
        for meas in range(1,len(tag_pos),1):##goes through each measurement5 line by line
            data_real.append((tag_pos[meas]))
            data_theor.append(tag_pos[0])
    for tuple in data_real:
        tc+=1
        x_real,y_real = tuple
        x_coord_real_list.append(x_real)
        y_coord_real_list.append(y_real)
    for tuple in data_theor:
        th+=1
        x_theor,y_theor = tuple
        x_coord_theor_list.append(x_theor)
        y_coord_theor_list.append(y_theor)
    fig,ax = plt.subplots()
    #ax.axline((0, 0), slope=.25, color='C0', label='by slope')
    plt.plot(x_ideal,y_ideal)
    plt.scatter(x_coord_theor_list,x_coord_real_list, label = 'X-Coordinates', color = 'blue')
    plt.scatter(y_coord_theor_list,y_coord_real_list, label = 'Y-Coordinates', marker='x', color = 'red')
    plt.title('Theoretical versus Measured Decawave values in 2-dimensional coordinate space')
    plt.xlabel("Theoretical values (M)")
    plt.ylabel("Experimental values (M)")
    plt.legend()
    plt.show()


def hist_LOS(theor_result,exp_result,LOS_data):
    diff = []
    for tag_pos in LOS_data:
        i = 1
        #theor_x,theor_y = tag_pos()
        #print(theor_x)
        print(tag_pos)
        for meas in tag_pos:
            i+=1##incrememnt

def range_errorLOS(parsed_LOS):
    """
    :param parsed_LOS:
    :return:
    """
    diff_X = []
    diff_Y = []
    for r in parsed_LOS:
        i = 1
        temp = r
        while i < len(temp):
            print(i)
            i+=1
        print("dildo")


if __name__ == '__main__':
    #theor_los,exp_los = getdataLOS() ## Function returns theoretical and experiment Y_coordinates as a list
    data_LOS = parsedataLOS()##Function to return the LOS data's coordinates as tuple w/ theor_first
    #data_NLOS = parsedataNLOS()##Function to return the NLOS data coordinates as L of tuples w/theoretical first
    #data_KNLOS = parsedataKNLOS()##Function to return the KNLOS data; then tuples of obs vs predicted_pos in 2d first tuple is theoretical
    #meanerrorLOS(theor_los,exp_los,data_LOS)
    #hist_LOS(theor_los,exp_los,data_LOS)
    #range_errorLOS(data_LOS)
    #cdfLOS(theor_los,exp_los,data_LOS)
